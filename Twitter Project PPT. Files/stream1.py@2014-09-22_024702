from tweepy import Stream
from tweepy import OAuthHandler
from tweepy.streaming import StreamListener
from tweepy.api import API
from time import gmtime,strftime
import time
import MySQLdb

ckey = 'ZuOG4EnYSaytbMJrjujkE4m0G'
csecret= '5kHVA3iQKUJ2xEwWi3OfnDnXePgr5qUrEoY8PljYChoOLARp5O'
atoken= '99918081-CzzDcnKJPO8MR2OIcpHDEHoY9ti7wGAggcME3ke4h'
asecret= 'NhyIvJLTygJwpHL9r0Ic2Gu2sPDl44dDvYtK5xfxMXWLS'

auth = OAuthHandler(ckey,csecret)		
auth.set_access_token(atoken,asecret)
api = API(auth)

class listener(StreamListener):

    def __init__(self, api=None):

        self.api = api or API()
        self.n = 0
        self.i = 1
        self.prefix = 'twitter_stream_file'
        self.output = open(self.prefix + '-' + str(self.i) + '@' + strftime("%y%m%d-%H%M%S") + '.json', 'w')
        self.i = self.i+1
        self.counter = 1

    def on_status(self, status):
	
        try:	
            
            while self.n <= 20000:

                if status.geo is not None:
                    print self.counter
                    print status.text.encode('utf8', 'ignore').strip()
                    print '\n'
                    self.n = self.n+1
                    cnxn = MySQLdb.connect(host = "localhost" ,user = "root" ,passwd= "" ,db= "twitter_data")
                    cursor = cnxn.cursor()
                    cnxn.autocommit(True)
                    usr_name = status.user.screen_name
                    usr_twitter_id = status.user.id
                    tweet_from = status.source.encode('utf8', 'ignore').strip().replace("\'", r"\'")
                    print "before"
                    tweet_decode = status.text.encode('utf8', 'ignore').strip().replace("\'", r"\'")
                    print "after"
                    #location_dict = status.geo
                    location_name = status.place
                                
                    if location_name is not None:
                        location_cordinates = status.geo[u'coordinates']	
                        location_geo_name = location_name.full_name.encode('utf8', 'ignor').strip().replace("\'", r"\'")
                        self.output.write("\n" + tweet_decode + "\n" + str(usr_name) + "\n" + str(usr_twitter_id) + "\n" + str(location_cordinates) + "\n" + tweet_from + "\n" + location_geo_name + "\n" + "***************************************")
                        query = """ insert into tweet_data(tweet,location_coordinates,user_name,user_twitter_id,tweet_source,location) values ('%s','%s','%s','%s','%s','%s') """ % (tweet_decode,str(location_cordinates),str(usr_name),str(usr_twitter_id),tweet_from,location_geo_name)
                        cursor.execute(query)
                        print "not none" + "\n"
                        self.counter = self.counter+1		    		    	
                        return True
                
                    else:
                        self.output.write("\n" + tweet_decode + "\n" + str(usr_name) + "\n" + str(usr_twitter_id) + "\n" + "Not Known" + "\n" + tweet_from + "\n" + "Don't Know" + "\n" + "***************************************")
                        query = """ insert into tweet_data(tweet,location_coordinates,user_name,user_twitter_id,tweet_source,location) values ('%s','%s','%s','%s','%s','%s') """ % (tweet_decode,"Not Known",str(usr_name),str(usr_twitter_id),tweet_from,"Dont Know")
                        cursor.execute(query)
                        print "none" + "\n"
                        self.counter = self.counter+1	    		    	
                        return True

                else:
                    return True

            else:
                self.output.close()
                if self.i <= 15:
                    self.output = open(self.prefix + '-' + str(self.i) + '@' + strftime("%y%m%d-%H%M%S") + '.json', 'w')
                    self.i = self.i+1
                    self.n = 0
                    return True
                else:
                    print "You Now have sufficient( ", str(self.counter), " ) Tweets. Please run again for more data."
                    return False
	                   
        except Exception, e:
            print 'Error in Status : ', self.counter, str(e) + "\n"
            self.counter = self.counter+1
            return True
	    
    def on_error(self, status):
        print 'Error in your Syntax : ', self.counter, str(status) + "\n"
        #self.counter = self.counter+1
        return False
	    

twitterStream = Stream(auth,listener())
twitterStream.filter(track=['iphone6','iphone 6', '#iphone6', '#iphone 6', 'iphone6+', 'iphone6plus', 'iphone6 plus', '#iphone6+', '#iphone6plus', 'iphone6 +'])

